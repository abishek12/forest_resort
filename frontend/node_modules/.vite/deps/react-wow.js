import {
  require_react_dom
} from "./chunk-GJ5PGLZ3.js";
import {
  require_react
} from "./chunk-XLKA4T3M.js";
import {
  require_prop_types
} from "./chunk-BH6VSZGE.js";
import {
  __commonJS
} from "./chunk-WXXH56N5.js";

// node_modules/react-wow/dist/utils/event.js
var require_event = __commonJS({
  "node_modules/react-wow/dist/utils/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var on = exports.on = function on2(el, eventName, callback) {
      var opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (el.addEventListener) {
        el.addEventListener(eventName, callback, opts);
      } else if (el.attachEvent) {
        el.attachEvent("on" + eventName, function(e) {
          callback.call(el, e || window.event);
        });
      }
    };
    var off = exports.off = function off2(el, eventName, callback) {
      var opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (el.removeEventListener) {
        el.removeEventListener(eventName, callback, opts);
      } else if (el.detachEvent) {
        el.detachEvent("on" + eventName, callback);
      }
    };
  }
});

// node_modules/react-wow/dist/utils/splice.js
var require_splice = __commonJS({
  "node_modules/react-wow/dist/utils/splice.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function() {
      var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var item = arguments[1];
      var index = arr.indexOf(item);
      if (index !== -1) {
        arr.splice(index, 1);
      }
    };
  }
});

// node_modules/react-wow/dist/utils/trim.js
var require_trim = __commonJS({
  "node_modules/react-wow/dist/utils/trim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function() {
      var str = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var arr = str.trim().split(" ");
      return arr.filter(function(n, i) {
        return !!n && arr.indexOf(n) === i;
      }).join(" ");
    };
  }
});

// node_modules/react-wow/dist/utils/scrollParent.js
var require_scrollParent = __commonJS({
  "node_modules/react-wow/dist/utils/scrollParent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(node) {
      if (!node) {
        return document.documentElement;
      }
      var excludeStaticParent = node.style.position === "absolute";
      var overflowRegex = /(scroll|auto)/;
      var parent = node;
      while (parent) {
        if (!parent.parentNode) {
          return node.ownerDocument || document.documentElement;
        }
        var style = window.getComputedStyle(parent);
        var position = style.position;
        var overflow = style.overflow;
        var overflowX = style["overflow-x"];
        var overflowY = style["overflow-y"];
        if (position === "static" && excludeStaticParent) {
          parent = parent.parentNode;
          continue;
        }
        if (overflowRegex.test(overflow) && overflowRegex.test(overflowX) && overflowRegex.test(overflowY)) {
          return parent;
        }
        parent = parent.parentNode;
      }
      return node.ownerDocument || node.documentElement || document.documentElement;
    };
  }
});

// node_modules/react-wow/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-wow/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactDom = require_react_dom();
    var _reactDom2 = _interopRequireDefault(_reactDom);
    var _propTypes = require_prop_types();
    var _event = require_event();
    var _splice = require_splice();
    var _splice2 = _interopRequireDefault(_splice);
    var _trim = require_trim();
    var _trim2 = _interopRequireDefault(_trim);
    var _scrollParent = require_scrollParent();
    var _scrollParent2 = _interopRequireDefault(_scrollParent);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var LISTEN_FLAG = "data-react-wow";
    var defaultBoundingClientRect = { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
    var caches = {
      listeners: [],
      pending: []
      // try to handle passive events
    };
    var passiveEventSupported = false;
    try {
      opts = Object.defineProperty({}, "passive", {
        get: function get() {
          passiveEventSupported = true;
        }
      });
      window.addEventListener("test", null, opts);
    } catch (e) {
    }
    var opts;
    var passiveEvent = passiveEventSupported ? { capture: false, passive: true } : false;
    var checkOverflowVisible = function checkOverflowVisible2(component, parent) {
      var node = _reactDom2.default.findDOMNode(component);
      var parentTop = void 0;
      var parentHeight = void 0;
      try {
        var _parent$getBoundingCl = parent.getBoundingClientRect();
        parentTop = _parent$getBoundingCl.top;
        parentHeight = _parent$getBoundingCl.height;
      } catch (e) {
        parentTop = defaultBoundingClientRect.top;
        parentHeight = defaultBoundingClientRect.height;
      }
      var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
      var intersectionTop = Math.max(parentTop, 0);
      var intersectionHeight = Math.min(windowInnerHeight, parentTop + parentHeight) - intersectionTop;
      var top = void 0;
      var height = void 0;
      try {
        var _node$getBoundingClie = node.getBoundingClientRect();
        top = _node$getBoundingClie.top;
        height = _node$getBoundingClie.height;
      } catch (e) {
        top = defaultBoundingClientRect.top;
        height = defaultBoundingClientRect.height;
      }
      var offsetTop = top - intersectionTop;
      var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset];
      return offsetTop - offsets[0] <= intersectionHeight && offsetTop + height + offsets[1] >= 0;
    };
    var checkNormalVisible = function checkNormalVisible2(component) {
      var node = _reactDom2.default.findDOMNode(component);
      if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length))
        return false;
      var top = void 0;
      var elementHeight = void 0;
      try {
        var _node$getBoundingClie2 = node.getBoundingClientRect();
        top = _node$getBoundingClie2.top;
        elementHeight = _node$getBoundingClie2.height;
      } catch (e) {
        top = defaultBoundingClientRect.top;
        elementHeight = defaultBoundingClientRect.height;
      }
      var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
      var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset];
      return top - offsets[0] <= windowInnerHeight && top + elementHeight + offsets[1] >= 0;
    };
    var checkVisible = function checkVisible2(component) {
      var node = _reactDom2.default.findDOMNode(component);
      if (!node) {
        return;
      }
      var parent = (0, _scrollParent2.default)(node);
      var isOverflow = component.props.overflow && parent !== node.ownerDocument && parent !== document && parent !== document.documentElement;
      var visible = isOverflow ? checkOverflowVisible(component, parent) : checkNormalVisible(component);
      if (visible) {
        if (!component.visible) {
          caches.pending.push(component);
          component.visible = true;
          component.setState({
            stopped: false
          });
          component.forceUpdate();
        }
      }
    };
    var purgePending = function purgePending2() {
      caches.pending.forEach(function(component) {
        return (0, _splice2.default)(caches.listeners, component);
      });
      caches.pending = [];
    };
    var scrollHandler = function scrollHandler2() {
      caches.listeners.forEach(function(component) {
        return checkVisible(component);
      });
      purgePending();
    };
    var ReactWOW = function(_React$Component) {
      _inherits(ReactWOW2, _React$Component);
      function ReactWOW2(props) {
        _classCallCheck(this, ReactWOW2);
        var _this = _possibleConstructorReturn(this, (ReactWOW2.__proto__ || Object.getPrototypeOf(ReactWOW2)).call(this, props));
        _this.customStyle = function(hidden) {
          var _this$props = _this.props, duration = _this$props.duration, delay = _this$props.delay, iteration = _this$props.iteration, animation = _this$props.animation, disabled = _this$props.disabled;
          var style = {
            animationName: hidden ? "none" : animation,
            visibility: hidden && !disabled ? "hidden" : "visible"
          };
          if (duration) {
            style.animationDuration = duration;
          }
          if (delay) {
            style.animationDelay = delay;
          }
          if (iteration) {
            style.animationIterationCount = iteration;
          }
          return style;
        };
        _this.resetAnimation = function(e) {
          if (e.type.toLowerCase().indexOf("animationend") !== -1) {
            _this.setState({
              stopped: true
            }, function() {
              var callback = _this.props.callback;
              if (typeof callback === "function") {
                callback.call(_this, _reactDom2.default.findDOMNode(_this));
              }
            });
          }
        };
        _this.visible = false;
        _this.state = {
          stopped: false
        };
        return _this;
      }
      _createClass(ReactWOW2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.disabled) {
            return false;
          }
          if (this.props.overflow) {
            var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));
            if (parent && typeof parent.getAttribute === "function") {
              var listenerCount = 1 + +parent.getAttribute(LISTEN_FLAG);
              if (listenerCount === 1) {
                (0, _event.on)(parent, "scroll", scrollHandler, passiveEvent);
              }
              parent.setAttribute(LISTEN_FLAG, listenerCount);
            }
          } else if (!caches.listeners.length) {
            var _props = this.props, scroll = _props.scroll, resize = _props.resize;
            if (scroll) {
              (0, _event.on)(window, "scroll", scrollHandler, passiveEvent);
            }
            if (resize) {
              (0, _event.on)(window, "resize", scrollHandler, passiveEvent);
            }
          }
          caches.listeners.push(this);
          checkVisible(this);
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate() {
          return this.visible;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.props.disabled) {
            return false;
          }
          if (this.props.overflow) {
            var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));
            if (parent && typeof parent.getAttribute === "function") {
              var listenerCount = +parent.getAttribute(LISTEN_FLAG) - 1;
              if (listenerCount === 0) {
                (0, _event.off)(parent, "scroll", scrollHandler, passiveEvent);
                parent.removeAttribute(LISTEN_FLAG);
              } else {
                parent.setAttribute(LISTEN_FLAG, listenerCount);
              }
            }
          }
          (0, _splice2.default)(caches.listeners, this);
          if (!caches.listeners.length) {
            (0, _event.off)(window, "scroll", scrollHandler, passiveEvent);
            (0, _event.off)(window, "resize", scrollHandler, passiveEvent);
          }
        }
        /**
         * Custom style
         * @param  {boolean} hidden
         */
        /**
         * Reset animation
         * @param  {object} e
         */
      }, {
        key: "mergeProps",
        /**
         * Merge props
         * @param  {object} props
         */
        value: function mergeProps(props) {
          var _props2 = this.props, animation = _props2.animation, animateClass = _props2.animateClass;
          var style = this.customStyle(!this.visible);
          var className = this.visible ? animation + " " + (!this.state.stopped ? animateClass : "") : animation;
          return _extends({}, props, {
            style: _extends({}, props.style, style),
            className: (0, _trim2.default)((props.className ? props.className : "") + " " + className),
            onAnimationEnd: this.resetAnimation
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props3 = this.props, children = _props3.children, disabled = _props3.disabled;
          return disabled ? children : children ? _react2.default.Children.map(children, function(child) {
            return _react2.default.cloneElement(child, _this2.mergeProps(child.props));
          }) : null;
        }
      }]);
      return ReactWOW2;
    }(_react2.default.Component);
    ReactWOW.propTypes = {
      duration: _propTypes.string,
      delay: _propTypes.string,
      iteration: _propTypes.string,
      animation: _propTypes.string,
      children: _propTypes.node,
      scroll: _propTypes.bool,
      resize: _propTypes.bool,
      animateClass: _propTypes.string,
      offset: (0, _propTypes.oneOfType)([_propTypes.number, (0, _propTypes.arrayOf)(_propTypes.number)]),
      overflow: _propTypes.bool,
      callback: _propTypes.func
    };
    ReactWOW.defaultProps = {
      duration: "",
      // Animation duration
      delay: "",
      // Animation delay
      iteration: "",
      // Animation iteration count
      animation: "",
      // Animation name
      scroll: true,
      // Listen and react to scroll event
      resize: true,
      // Listen and react to resize event
      animateClass: "animated",
      // Animation css class
      offset: 0,
      // Distance to the element when triggering the animation
      overflow: false,
      // If your components inside a overflow container, set this to true
      disabled: false,
      // Disable the animation
      callback: function callback() {
      }
      // The callback is fired every time an animation is stoped
    };
    exports.default = ReactWOW;
  }
});
export default require_dist();
//# sourceMappingURL=react-wow.js.map
